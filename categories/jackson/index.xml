<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jackson on yufulou&#39;s </title>
    <link>/categories/jackson/</link>
    <description>Recent content in jackson on yufulou&#39;s </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 04 Jan 2021 14:14:38 +0800</lastBuildDate>
    
	<atom:link href="/categories/jackson/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>jackson做redis反序列化时，反序列化Map&lt;Integer, T&gt;时的问题</title>
      <link>/blog/redis-serializer/</link>
      <pubDate>Mon, 04 Jan 2021 14:14:38 +0800</pubDate>
      
      <guid>/blog/redis-serializer/</guid>
      <description>类似这个帖子提出的问题：https://stackoverflow.com/questions/55278446/redis-caching-mapinteger-string
即redis中事实上存储的都是字符串，包括key，但又需要反序列化成Map&amp;lt;Integer, String&amp;gt;类似的类型时，虽然能反序列化成功，但发现key的部分实际存储的还是字符串。
文中提出了如下解决办法：
但这个办法有个问题，如果是Integer为Key，Value为其他类型还是会有问题。
故通过Class.getGenericSuperclass重新做了动态版的Serializer（参考：https://blog.csdn.net/xuhailiang0816/article/details/78403041）：
public class CustomJsonSerializer extends Jackson2JsonRedisSerializer { public CustomJsonSerializer(Class type) { super(type); } @Override protected JavaType getJavaType(Class clazz) { if (List.class.isAssignableFrom(clazz)) { Type[] typeList = ((ParameterizedType)clazz.getGenericSuperclass()).getActualTypeArguments(); if (typeList.length &amp;gt; 0) { Class clazzT = (Class)typeList[0]; return TypeFactory.defaultInstance().constructCollectionType(List.class, clazzT); } } else if (Map.class.isAssignableFrom(clazz)) { Type[] typeList = ((ParameterizedType)clazz.getGenericSuperclass()).getActualTypeArguments(); if (typeList.length &amp;gt; 1) { Class clazzKey = (Class)typeList[0]; Class clazzVal = (Class)typeList[1]; return TypeFactory.defaultInstance().constructMapType(Map.class, clazzKey, clazzVal); } } // 非map和list类型，返回默认构造器即可  return TypeFactory.</description>
    </item>
    
  </channel>
</rss>